"""
Script para adicionar migra√ß√£o de classifica√ß√£o ao banco de dados
Este script deve ser executado para adicionar as colunas de classifica√ß√£o
"""

from backend.src.config import Config
import os
import sys
import psycopg2
from datetime import datetime

# Adicionar o diret√≥rio pai ao path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def run_classification_migration():
    """Executa a migra√ß√£o para adicionar colunas de classifica√ß√£o"""

    try:
        # Conectar ao banco
        conn = psycopg2.connect(Config.DATABASE_URL)
        cursor = conn.cursor()

        print("Iniciando migra√ß√£o de classifica√ß√£o...")

        # 1. Criar tabela de classifica√ß√µes se n√£o existir
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS classificacoes (
                id SERIAL PRIMARY KEY,
                grupo VARCHAR(100) NOT NULL,
                subgrupo VARCHAR(200) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(grupo, subgrupo)
            );
        """)

        # 2. Adicionar colunas de classifica√ß√£o na tabela registros se n√£o existirem
        cursor.execute("""
            DO $$ 
            BEGIN 
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='registros' AND column_name='classificacao_grupo') THEN
                    ALTER TABLE registros ADD COLUMN classificacao_grupo VARCHAR(100);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='registros' AND column_name='classificacao_subgrupo') THEN
                    ALTER TABLE registros ADD COLUMN classificacao_subgrupo VARCHAR(200);
                END IF;
                
                IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                              WHERE table_name='registros' AND column_name='classificacao_id') THEN
                    ALTER TABLE registros ADD COLUMN classificacao_id INTEGER REFERENCES classificacoes(id);
                END IF;
            END $$;
        """)

        # 3. Inserir dados padr√£o de classifica√ß√£o
        classificacoes_data = [
            # 1. Atividades em Campo
            ("Atividades em Campo", "Acelera√ß√£o de Atividades"),
            ("Atividades em Campo", "Atividade em Campo"),
            ("Atividades em Campo", "Autoriza√ß√£o de In√≠cio de Atividade"),
            ("Atividades em Campo", "Fim de Atividade"),
            ("Atividades em Campo", "In√≠cio de Atividade"),
            ("Atividades em Campo", "Paralisa√ß√£o de Atividade"),
            ("Atividades em Campo", "Realoca√ß√£o de Equipe"),
            ("Atividades em Campo", "Retomada de Atividade"),
            ("Atividades em Campo", "Suspens√£o de Atividade"),

            # 2. Mobiliza√ß√£o e Desmobiliza√ß√£o
            ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "Desmobiliza√ß√£o"),
            ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "In√≠cio da Mobiliza√ß√£o"),
            ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "Mobiliza√ß√£o"),

            # 3. Recursos e Log√≠stica
            ("Recursos e Log√≠stica",
             "Atraso na Entrega de Materiais Contratada/Contratante"),
            ("Recursos e Log√≠stica", "Dificuldade no Transporte de M√£o de Obra"),
            ("Recursos e Log√≠stica", "Entrega de Materiais/Equipamentos"),
            ("Recursos e Log√≠stica", "Falta de Materiais/Equipamentos"),
            ("Recursos e Log√≠stica", "Falta de Recursos Humanos"),
            ("Recursos e Log√≠stica", "Material fora dos padr√µes Contratada/Contratante"),

            # 4. Planejamento, Documentos e Licen√ßas
            ("Planejamento, Documentos e Licen√ßas",
             "Assinatura de Ordem de Servi√ßo"),
            ("Planejamento, Documentos e Licen√ßas", "Data Prevista para Atividade"),
            ("Planejamento, Documentos e Licen√ßas",
             "Entrega de Documenta√ß√£o/Plano/Projeto"),
            ("Planejamento, Documentos e Licen√ßas",
             "Falta de Autoriza√ß√£o/Licen√ßa/Projeto"),
            ("Planejamento, Documentos e Licen√ßas", "Inconsist√™ncia de Projeto"),
            ("Planejamento, Documentos e Licen√ßas", "Solicita√ß√£o de Plano"),

            # 5. Condi√ß√µes Externas e Interfer√™ncias
            ("Condi√ß√µes Externas e Interfer√™ncias", "Chuvas"),
            ("Condi√ß√µes Externas e Interfer√™ncias", "COVID-19"),
            ("Condi√ß√µes Externas e Interfer√™ncias", "Interfer√™ncias"),
            ("Condi√ß√µes Externas e Interfer√™ncias", "M√° Condi√ß√£o de Acesso"),
            ("Condi√ß√µes Externas e Interfer√™ncias", "Roubo ou Furto"),

            # 6. Desempenho, Qualidade e Anomalias
            ("Desempenho, Qualidade e Anomalias", "Atraso na Mobiliza√ß√£o"),
            ("Desempenho, Qualidade e Anomalias", "Atraso nas Atividades"),
            ("Desempenho, Qualidade e Anomalias", "Baixa Produtividade"),
            ("Desempenho, Qualidade e Anomalias", "DDS"),
            ("Desempenho, Qualidade e Anomalias", "Extraescopo"),
            ("Desempenho, Qualidade e Anomalias", "Manuten√ß√£o"),
            ("Desempenho, Qualidade e Anomalias", "Retrabalho"),

            # 7. Gest√£o Contratual e Relacionamento
            ("Gest√£o Contratual e Relacionamento", "An√°lise"),
            ("Gest√£o Contratual e Relacionamento", "Aprova√ß√£o"),
            ("Gest√£o Contratual e Relacionamento", "Discord√¢ncia"),
            ("Gest√£o Contratual e Relacionamento", "Diverg√™ncia no RDO"),
            ("Gest√£o Contratual e Relacionamento", "Pend√™ncias"),
            ("Gest√£o Contratual e Relacionamento", "Solicita√ß√µes"),

            # 8. Administra√ß√£o e Monitoramento
            ("Administra√ß√£o e Monitoramento", "Abertura de PTS"),
            ("Administra√ß√£o e Monitoramento", "Informa√ß√£o Geral"),
            ("Administra√ß√£o e Monitoramento", "RDO em Atraso"),
            ("Administra√ß√£o e Monitoramento", "Reuni√£o"),
        ]

        # Inserir classifica√ß√µes (ignorar duplicatas)
        for grupo, subgrupo in classificacoes_data:
            cursor.execute("""
                INSERT INTO classificacoes (grupo, subgrupo) 
                VALUES (%s, %s) 
                ON CONFLICT (grupo, subgrupo) DO NOTHING
            """, (grupo, subgrupo))

        # 4. Criar √≠ndices para melhor performance
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_registros_classificacao_grupo 
            ON registros(classificacao_grupo);
        """)

        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_registros_classificacao_id 
            ON registros(classificacao_id);
        """)

        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_classificacoes_grupo 
            ON classificacoes(grupo);
        """)

        # Commit das altera√ß√µes
        conn.commit()

        # Verificar quantas classifica√ß√µes foram inseridas
        cursor.execute("SELECT COUNT(*) FROM classificacoes")
        total_classificacoes = cursor.fetchone()[0]

        print(f"‚úÖ Migra√ß√£o de classifica√ß√£o conclu√≠da com sucesso!")
        print(f"üìä Total de classifica√ß√µes dispon√≠veis: {total_classificacoes}")
        print(
            f"üïí Executado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        cursor.close()
        conn.close()

        return True

    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {str(e)}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False


if __name__ == "__main__":
    print("üöÄ Executando migra√ß√£o de classifica√ß√£o...")
    success = run_classification_migration()

    if success:
        print("\n‚úÖ Migra√ß√£o executada com sucesso!")
        print("O sistema agora suporta classifica√ß√£o de registros.")
    else:
        print("\n‚ùå Falha na migra√ß√£o!")
        print("Verifique os logs de erro acima.")
        sys.exit(1)
