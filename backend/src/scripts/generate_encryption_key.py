"""
Script para Gerar Chave Mestra de Criptografia
Execute apenas uma vez e armazene a chave com seguran√ßa no Render Secrets
"""

import sys
import os
import logging

# ‚úÖ Primeiro ajuste o sys.path ANTES de importar qualquer m√≥dulo
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# ‚úÖ Agora os imports funcionar√£o
from services.encryption_service import generate_master_key

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    """Gera nova chave mestra para criptografia"""
    logger.info("üîë Gerando nova chave mestra de criptografia...")

    try:
        # Gerar chave mestra
        master_key = generate_master_key()

        logger.info("‚úÖ Chave mestra gerada com sucesso!")
        logger.info("")
        logger.info("üîê CHAVE MESTRA DE CRIPTOGRAFIA:")
        logger.info("=" * 60)
        print(master_key)
        logger.info("=" * 60)
        logger.info("")
        logger.info("‚ö†Ô∏è  INSTRU√á√ïES IMPORTANTES:")
        logger.info("1. COPIE esta chave e armazene com seguran√ßa")
        logger.info("2. Adicione no Render Secrets como ENCRYPTION_MASTER_KEY")
        logger.info("3. NUNCA compartilhe esta chave")
        logger.info("4. NUNCA commite esta chave no c√≥digo")
        logger.info("5. Fa√ßa backup seguro desta chave")
        logger.info("")
        logger.info("üìã Passos no Render:")
        logger.info("1. Acesse dashboard.render.com")
        logger.info("2. V√° para seu servi√ßo backend")
        logger.info("3. Environment ‚Üí Add Environment Variable")
        logger.info("4. Key: ENCRYPTION_MASTER_KEY")
        logger.info("5. Value: [cole a chave acima]")
        logger.info("6. Clique em Save Changes")

    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar chave: {e}")
        raise


if __name__ == '__main__':
    main()
