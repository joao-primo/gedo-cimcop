from routes.workflow import workflow_bp
from routes.pesquisa import pesquisa_bp
from routes.dashboard import dashboard_bp
from routes.registros import registros_bp
from routes.tipos_registro import tipos_registro_bp
from routes.obras import obras_bp
from routes.auth import auth_bp
from routes.user import user_bp
from routes.configuracoes import configuracoes_bp, init_configuracoes
from routes.importacao import importacao_bp
from routes.password_reset import password_reset_bp
from routes.classificacoes import classificacoes_bp
from models.configuracao_workflow import ConfiguracaoWorkflow
from models.configuracao import Configuracao, ConfiguracaoUsuario
from models.registro import Registro
from models.tipo_registro import TipoRegistro
from models.obra import Obra
from models.user import db, User
from models.password_reset import PasswordResetToken
from models.audit_log import AuditLog
from models.classificacao import Classificacao
from config import config
from flask_cors import CORS
from flask import Flask, send_from_directory, request
from sqlalchemy import text
import os
import sys
import logging
from flask_seasurf import SeaSurf
from extensions import limiter
from flask_limiter.util import get_remote_address

# Configurar logging estruturado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s'
)
logger = logging.getLogger(__name__)

# Adicionar o diret√≥rio atual ao path para importar services
sys.path.insert(0, os.path.dirname(__file__))
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


def create_app(config_name=None):
    """Factory function para criar a aplica√ß√£o Flask"""
    if config_name is None:
        config_name = os.getenv('FLASK_ENV', 'development')

    app = Flask(__name__, static_folder=os.path.join(
        os.path.dirname(__file__), 'static'))

    # Carregar configura√ß√£o
    app.config.from_object(config[config_name])
    config[config_name].init_app(app)

    # CORS mais permissivo
    if config_name == 'production':
        # URLs permitidas em produ√ß√£o
        allowed_origins = [
            'https://gedo-cimcop.vercel.app',
            'https://gedo-cimcop-frontend.vercel.app',
            'https://*.vercel.app',
        ]

        # Adicionar URL do ambiente se existir
        if app.config.get('FRONTEND_URL'):
            allowed_origins.append(app.config['FRONTEND_URL'])

        # Adicionar URLs adicionais se existirem
        if os.getenv('ADDITIONAL_ORIGINS'):
            allowed_origins.extend(os.getenv('ADDITIONAL_ORIGINS').split(','))

        logger.info(f"üåê CORS configurado para produ√ß√£o: {allowed_origins}")

        CORS(app,
             origins=allowed_origins,
             supports_credentials=True,
             methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
             allow_headers=["Content-Type",
                            "Authorization", "X-Requested-With"],
             expose_headers=["Content-Range", "X-Content-Range"])
    else:
        # Desenvolvimento - mais permissivo
        logger.info("üåê CORS configurado para desenvolvimento")
        CORS(app,
             origins=["http://localhost:5173",
                      "http://127.0.0.1:5173", "http://localhost:3000"],
             supports_credentials=True,
             methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
             allow_headers=["Content-Type",
                            "Authorization", "X-Requested-With"],
             expose_headers=["Content-Range", "X-Content-Range"])

    # Inicializar extens√µes
    db.init_app(app)

    # Registrar blueprints
    app.register_blueprint(user_bp, url_prefix='/api/users')
    app.register_blueprint(auth_bp, url_prefix='/api/auth')
    app.register_blueprint(password_reset_bp, url_prefix='/api')
    app.register_blueprint(obras_bp, url_prefix='/api/obras')
    app.register_blueprint(tipos_registro_bp, url_prefix='/api/tipos-registro')
    app.register_blueprint(registros_bp, url_prefix='/api/registros')
    app.register_blueprint(dashboard_bp, url_prefix='/api/dashboard')
    app.register_blueprint(pesquisa_bp, url_prefix='/api/pesquisa')
    app.register_blueprint(configuracoes_bp, url_prefix='/api/configuracoes')
    app.register_blueprint(importacao_bp, url_prefix='/api/importacao')
    app.register_blueprint(workflow_bp, url_prefix='/api/workflow')
    app.register_blueprint(classificacoes_bp, url_prefix='/api/classificacoes')

    # Middleware CORS manual para casos especiais
    @app.before_request
    def handle_preflight():
        if request.method == "OPTIONS":
            response = app.make_default_options_response()
            headers = response.headers

            # Headers CORS manuais
            origin = request.headers.get('Origin')
            if origin:
                if config_name == 'production':
                    allowed_origins = [
                        'https://gedo-cimcop.vercel.app',
                        'https://gedo-cimcop-frontend.vercel.app'
                    ]
                    if origin in allowed_origins or origin.endswith('.vercel.app'):
                        headers['Access-Control-Allow-Origin'] = origin
                else:
                    headers['Access-Control-Allow-Origin'] = origin

            headers['Access-Control-Allow-Methods'] = 'GET,POST,PUT,DELETE,OPTIONS'
            headers['Access-Control-Allow-Headers'] = 'Content-Type,Authorization,X-Requested-With'
            headers['Access-Control-Allow-Credentials'] = 'true'
            headers['Access-Control-Max-Age'] = '86400'

            return response

    @app.after_request
    def security_headers(response):
        """Adiciona headers de seguran√ßa"""
        # Headers CORS adicionais apenas se necess√°rio
        try:
            origin = request.headers.get('Origin')
            if origin and config_name == 'production':
                if origin.endswith('.vercel.app') or origin in ['https://gedo-cimcop.vercel.app']:
                    response.headers['Access-Control-Allow-Origin'] = origin
                    response.headers['Access-Control-Allow-Credentials'] = 'true'
        except Exception as e:
            # Se houver erro, apenas log e continue
            logger.debug(f"Erro ao processar headers CORS: {e}")

        # Headers de seguran√ßa apenas em produ√ß√£o
        if config_name == 'production':
            response.headers['X-Content-Type-Options'] = 'nosniff'
            response.headers['X-Frame-Options'] = 'DENY'
            response.headers['X-XSS-Protection'] = '1; mode=block'

        return response

    # Handlers de erro
    @app.errorhandler(404)
    def not_found(error):
        return {'message': 'Recurso n√£o encontrado'}, 404

    @app.errorhandler(500)
    def internal_error(error):
        db.session.rollback()
        logger.error(f"Erro interno: {str(error)}")
        return {'message': 'Erro interno do servidor'}, 500

    @app.errorhandler(413)
    def too_large(error):
        return {'message': 'Arquivo muito grande'}, 413

    csrf = SeaSurf(app)

    limiter.init_app(app)

    return app


def migrate_blob_columns():
    """Migra√ß√£o autom√°tica das colunas do Vercel Blob"""
    try:
        # Verificar se as colunas j√° existem
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'registros' 
            AND column_name IN ('blob_url', 'blob_pathname')
        """))

        existing_columns = [row[0] for row in result.fetchall()]

        # Adicionar blob_url se n√£o existir
        if 'blob_url' not in existing_columns:
            logger.info("‚ûï Adicionando coluna blob_url...")
            db.session.execute(text("""
                ALTER TABLE registros 
                ADD COLUMN blob_url VARCHAR(500)
            """))
            logger.info("‚úÖ Coluna blob_url adicionada")

        # Adicionar blob_pathname se n√£o existir
        if 'blob_pathname' not in existing_columns:
            logger.info("‚ûï Adicionando coluna blob_pathname...")
            db.session.execute(text("""
                ALTER TABLE registros 
                ADD COLUMN blob_pathname VARCHAR(500)
            """))
            logger.info("‚úÖ Coluna blob_pathname adicionada")

        # Commit das altera√ß√µes
        db.session.commit()
        logger.info("üéâ Migra√ß√£o das colunas Blob conclu√≠da!")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erro na migra√ß√£o Blob: {str(e)}")
        db.session.rollback()
        return False


def migrate_classificacao_columns():
    """Migra√ß√£o autom√°tica das colunas de classifica√ß√£o"""
    try:
        # Verificar se as colunas j√° existem
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'registros' 
            AND column_name IN ('classificacao_grupo', 'classificacao_subgrupo', 'classificacao_id')
        """))

        existing_columns = [row[0] for row in result.fetchall()]

        # Adicionar classificacao_grupo se n√£o existir
        if 'classificacao_grupo' not in existing_columns:
            logger.info("‚ûï Adicionando coluna classificacao_grupo...")
            db.session.execute(text("""
                ALTER TABLE registros 
                ADD COLUMN classificacao_grupo VARCHAR(100)
            """))
            logger.info("‚úÖ Coluna classificacao_grupo adicionada")

        # Adicionar classificacao_subgrupo se n√£o existir
        if 'classificacao_subgrupo' not in existing_columns:
            logger.info("‚ûï Adicionando coluna classificacao_subgrupo...")
            db.session.execute(text("""
                ALTER TABLE registros 
                ADD COLUMN classificacao_subgrupo VARCHAR(100)
            """))
            logger.info("‚úÖ Coluna classificacao_subgrupo adicionada")

        # Adicionar classificacao_id se n√£o existir
        if 'classificacao_id' not in existing_columns:
            logger.info("‚ûï Adicionando coluna classificacao_id...")
            db.session.execute(text("""
                ALTER TABLE registros 
                ADD COLUMN classificacao_id INTEGER
            """))
            logger.info("‚úÖ Coluna classificacao_id adicionada")

        # Commit das altera√ß√µes
        db.session.commit()
        logger.info("üéâ Migra√ß√£o das colunas de Classifica√ß√£o conclu√≠da!")
        return True

    except Exception as e:
        logger.error(f"‚ùå Erro na migra√ß√£o de Classifica√ß√£o: {str(e)}")
        db.session.rollback()
        return False


def check_database_integrity():
    """Verificar integridade do banco de dados"""
    try:
        db.session.execute(text('SELECT 1'))
        logger.info("‚úÖ Tabela configuracoes_workflow: OK")

        PasswordResetToken.query.first()
        logger.info("‚úÖ Tabela password_reset_tokens: OK")
        return True
    except Exception as e:
        logger.error(f"‚ùå Problema nas tabelas: {e}")
        return False


def create_default_data():
    """Criar dados padr√£o do sistema"""
    if not check_database_integrity():
        logger.warning("‚ö†Ô∏è Problemas detectados no banco de dados!")
        return False

    # Criar usu√°rio admin padr√£o apenas se n√£o existir
    admin = db.session.query(User).filter_by(email='admin@gedo.com').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@gedo.com',
            password='admin123',  # Senha simples para teste
            role='administrador',
            must_change_password=False  # Para facilitar o teste inicial
        )
        db.session.add(admin)
        logger.info("‚úÖ Usu√°rio admin criado")
        logger.info("üìß Email: admin@gedo.com")
        logger.info("üîë Senha: admin123")
    else:
        logger.info("‚ÑπÔ∏è Usu√°rio admin j√° existe")

    # Criar tipos de registro padr√£o
    tipos_padrao = [
        "Aditivo", "ART", "Ata", "Carta Preposto", "Contrato", "Croqui", "E-mail",
        "Especifica√ß√£o T√©cnica", "Ficha de Verifica√ß√£o", "Memorial Descritivo",
        "Memorando / Of√≠cio / Correspond√™ncia", "Notifica√ß√£o", "Ordens de Servi√ßo",
        "Plano de Ataque", "Plano de A√ß√£o", "RDO", "Relat√≥rio", "Seguro",
        "SIT / NAP / QTO", "Termo de Entrega Definitivo", "Termo de Entrega Provis√≥ria"
    ]

    for tipo_nome in tipos_padrao:
        tipo_existente = db.session.query(
            TipoRegistro).filter_by(nome=tipo_nome).first()
        if not tipo_existente:
            tipo = TipoRegistro(
                nome=tipo_nome,
                descricao=f'Tipo de registro: {tipo_nome}'
            )
            db.session.add(tipo)

    # NOVO: Criar classifica√ß√µes padr√£o
    classificacoes_padrao = [
        # Atividades em Campo
        ("Atividades em Campo", "Acelera√ß√£o de Atividades"),
        ("Atividades em Campo", "Atividade em Campo"),
        ("Atividades em Campo", "Autoriza√ß√£o de In√≠cio de Atividade"),
        ("Atividades em Campo", "Fim de Atividade"),
        ("Atividades em Campo", "In√≠cio de Atividade"),
        ("Atividades em Campo", "Paralisa√ß√£o de Atividade"),
        ("Atividades em Campo", "Realoca√ß√£o de Equipe"),
        ("Atividades em Campo", "Retomada de Atividade"),
        ("Atividades em Campo", "Suspens√£o de Atividade"),

        # Mobiliza√ß√£o e Desmobiliza√ß√£o
        ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "Desmobiliza√ß√£o"),
        ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "In√≠cio da Mobiliza√ß√£o"),
        ("Mobiliza√ß√£o e Desmobiliza√ß√£o", "Mobiliza√ß√£o"),

        # Recursos e Log√≠stica
        ("Recursos e Log√≠stica", "Atraso na Entrega de Materiais Contratada"),
        ("Recursos e Log√≠stica", "Atraso na Entrega de Materiais Contratante"),
        ("Recursos e Log√≠stica", "Dificuldade no Transporte de M√£o de Obra"),
        ("Recursos e Log√≠stica", "Entrega de Materiais/Equipamentos"),
        ("Recursos e Log√≠stica", "Falta de Materiais/Equipamentos"),
        ("Recursos e Log√≠stica", "Falta de Recursos Humanos"),
        ("Recursos e Log√≠stica", "Material fora dos padr√µes Contratada"),
        ("Recursos e Log√≠stica", "Material fora dos padr√µes Contratante"),

        # Planejamento, Documentos e Licen√ßas
        ("Planejamento, Documentos e Licen√ßas", "Assinatura de Ordem de Servi√ßo"),
        ("Planejamento, Documentos e Licen√ßas", "Data Prevista para Atividade"),
        ("Planejamento, Documentos e Licen√ßas", "Entrega de Documenta√ß√£o"),
        ("Planejamento, Documentos e Licen√ßas", "Entrega de Plano"),
        ("Planejamento, Documentos e Licen√ßas", "Entrega de Projeto"),
        ("Planejamento, Documentos e Licen√ßas", "Falta de Autoriza√ß√£o"),
        ("Planejamento, Documentos e Licen√ßas", "Falta de Licen√ßa"),
        ("Planejamento, Documentos e Licen√ßas", "Falta de Projeto"),
        ("Planejamento, Documentos e Licen√ßas", "Inconsist√™ncia de Projeto"),
        ("Planejamento, Documentos e Licen√ßas", "Solicita√ß√£o de Plano"),

        # Condi√ß√µes Externas e Interfer√™ncias
        ("Condi√ß√µes Externas e Interfer√™ncias", "Chuvas e Impactos"),
        ("Condi√ß√µes Externas e Interfer√™ncias",
         "COVID-19: Afastamento ou Impactos"),
        ("Condi√ß√µes Externas e Interfer√™ncias", "Interfer√™ncias Externas"),
        ("Condi√ß√µes Externas e Interfer√™ncias", "M√° Condi√ß√£o de Acesso"),
        ("Condi√ß√µes Externas e Interfer√™ncias", "Roubo ou Furto"),

        # Desempenho, Qualidade e Anomalias
        ("Desempenho, Qualidade e Anomalias", "Atraso na Mobiliza√ß√£o Contratada"),
        ("Desempenho, Qualidade e Anomalias", "Atraso na Mobiliza√ß√£o Contratante"),
        ("Desempenho, Qualidade e Anomalias", "Atraso nas Atividades em Campo"),
        ("Desempenho, Qualidade e Anomalias", "Baixa Produtividade"),
        ("Desempenho, Qualidade e Anomalias", "DDS"),
        ("Desempenho, Qualidade e Anomalias", "Extraescopo / Aditivo"),
        ("Desempenho, Qualidade e Anomalias", "Manuten√ß√£o"),
        ("Desempenho, Qualidade e Anomalias", "Manuten√ß√£o Peri√≥dica"),
        ("Desempenho, Qualidade e Anomalias", "Retrabalho"),

        # Gest√£o Contratual e Relacionamento
        ("Gest√£o Contratual e Relacionamento", "An√°lise pela Contratada"),
        ("Gest√£o Contratual e Relacionamento", "Aprova√ß√£o pelo Contratante"),
        ("Gest√£o Contratual e Relacionamento", "Discord√¢ncia do Contratante"),
        ("Gest√£o Contratual e Relacionamento", "Diverg√™ncia em Informa√ß√£o de RDO"),
        ("Gest√£o Contratual e Relacionamento", "Pend√™ncias"),
        ("Gest√£o Contratual e Relacionamento", "Solicita√ß√£o da Contratada"),
        ("Gest√£o Contratual e Relacionamento", "Solicita√ß√£o do Contratante"),

        # Administra√ß√£o e Monitoramento
        ("Administra√ß√£o e Monitoramento",
         "Abertura de PTS (Permiss√£o de Trabalho Seguro)"),
        ("Administra√ß√£o e Monitoramento", "Informa√ß√£o Geral"),
        ("Administra√ß√£o e Monitoramento", "RDO em Atraso"),
        ("Administra√ß√£o e Monitoramento", "Reuni√£o"),
    ]

    for grupo, subgrupo in classificacoes_padrao:
        classificacao_existente = db.session.query(Classificacao).filter_by(
            grupo=grupo, subgrupo=subgrupo).first()
        if not classificacao_existente:
            classificacao = Classificacao(grupo=grupo, subgrupo=subgrupo)
            db.session.add(classificacao)

    try:
        db.session.commit()
        init_configuracoes()
        return True
    except Exception as e:
        logger.error(f"Erro ao criar dados padr√£o: {e}")
        db.session.rollback()
        return False


def create_database_directory():
    """Criar diret√≥rio do banco de dados se n√£o existir"""
    db_dir = os.path.join(os.path.dirname(__file__), 'database')
    if not os.path.exists(db_dir):
        os.makedirs(db_dir)
        logger.info(f"üìÅ Diret√≥rio do banco criado: {db_dir}")


# Criar aplica√ß√£o
app = create_app()

# Inicializa√ß√£o do banco de dados
with app.app_context():
    create_database_directory()
    db.create_all()
    logger.info("üóÑÔ∏è Tabelas do banco de dados criadas/verificadas")

    # NOVO: Executar migra√ß√£o das colunas Blob
    migrate_blob_columns()

    # NOVO: Executar migra√ß√£o das colunas de Classifica√ß√£o
    migrate_classificacao_columns()

    if create_default_data():
        logger.info("üìä Dados padr√£o inicializados")
        logger.info("‚úÖ Sistema GEDO CIMCOP inicializado com sucesso!")
        logger.info("")
        logger.info("üîë CREDENCIAIS DE LOGIN:")
        logger.info("   Email: admin@gedo.com")
        logger.info("   Senha: admin123")
    else:
        logger.warning("‚ö†Ô∏è Sistema iniciado com problemas no banco de dados")


@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    """Servir arquivos est√°ticos do frontend"""
    static_folder_path = app.static_folder
    if path and os.path.exists(os.path.join(static_folder_path, path)):
        return send_from_directory(static_folder_path, path)
    index_path = os.path.join(static_folder_path, 'index.html')
    if os.path.exists(index_path):
        return send_from_directory(static_folder_path, 'index.html')
    return "GEDO CIMCOP - Sistema de Gerenciamento de Documentos e Registros de Obras", 200


@app.route('/api/health', methods=['GET'])
def health_check():
    """Verifica√ß√£o de sa√∫de da API"""
    return {
        'status': 'ok',
        'message': 'GEDO CIMCOP API est√° funcionando',
        'version': '1.0.0',
        'environment': os.getenv('FLASK_ENV', 'development'),
        'cors_enabled': True,
        'vercel_blob_enabled': bool(os.getenv('BLOB_READ_WRITE_TOKEN')),
        'features': [
            'Autentica√ß√£o',
            'Gest√£o de Obras',
            'Registros de Documentos',
            'Pesquisa Avan√ßada',
            'Dashboard',
            'Configura√ß√µes',
            'Importa√ß√£o em Lote',
            'Reset de Senha',
            'Vercel Blob Storage',
            'Sistema de Classifica√ß√£o'
        ]
    }, 200


if __name__ == '__main__':
    # Debug: Mostrar todas as rotas registradas
    with app.app_context():
        logger.info("\nüîç ROTAS REGISTRADAS:")
        for rule in app.url_map.iter_rules():
            methods = ', '.join(rule.methods - {'HEAD', 'OPTIONS'})
            logger.info(f"  {methods:15} {rule.rule}")

    logger.info("üöÄ Iniciando servidor GEDO CIMCOP...")
    logger.info("üìç Acesse: http://localhost:5000")
    logger.info("üîß API Health Check: http://localhost:5000/api/health")

    # Configura√ß√µes de desenvolvimento
    app.run(
        host='0.0.0.0',
        port=int(os.getenv('PORT', 5000)),
        debug=os.getenv('FLASK_ENV') == 'development'
    )
